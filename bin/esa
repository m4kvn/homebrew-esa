#!/bin/bash

PROG_NAME=$(basename $0)
TOKEN_NAME=$PROG_NAME-command-token
TEAM_NAME=$PROG_NAME-command-team
SERVICE_NAME=$PROG_NAME-command

usage() {
    echo
    echo "Usage: $PROG_NAME [OPTIONS] QUERY"
    echo "  This is a script for searching esa articles."
    echo
    echo "Options:"
    echo "  -h, --help  : Display help"
    echo "  -n, --new   : Open a page to create an article"
    echo "  -N, --num   : Display article number"
    echo "  --token     : Change your esa token"
    echo "  --team      : Change your esa team name"
    echo
    exit 1
}

input_token() {
    if expr "${1:-}" : "update" > /dev/null; then
        TOKEN_UPDATE=1
    fi
    printf "Please input your esa token: "
    read ESA_TOKEN

    [ -z $ESA_TOKEN ] && exit 1

    if [ ${TOKEN_UPDATE:-} ]; then
        security delete-generic-password \
        -a $TOKEN_NAME \
        -s $SERVICE_NAME > /dev/null 2> /dev/null
    fi

    security add-generic-password \
        -a $TOKEN_NAME \
        -w $ESA_TOKEN \
        -s $SERVICE_NAME
}

input_team() {
    if expr "${1:-}" : "update" > /dev/null; then
        TEAM_UPDATE=1
        echo "Current team name: $ESA_TEAM"
    fi
    printf "Please input your esa team name: "
    read ESA_TEAM

    [ -z $ESA_TEAM ] && exit 1

    if [ ${TEAM_UPDATE:-} ]; then
        security delete-generic-password \
        -a $TEAM_NAME \
        -s $SERVICE_NAME > /dev/null 2> /dev/null
    fi

    security add-generic-password \
        -a $TEAM_NAME \
        -w $ESA_TEAM \
        -s $SERVICE_NAME
}

# キーチェーンからトークンを取得
ESA_TOKEN=$(security find-generic-password -w \
    -a $TOKEN_NAME \
    -s $SERVICE_NAME 2> /dev/null)

# トークンを入力して保存
if [ -z $ESA_TOKEN ]; then
    echo "$PROG_NAME: ESA_TOKEN is not found."
    input_token
fi

# キーチェーンからチーム名を取得
ESA_TEAM=$(security find-generic-password -w \
    -a $TEAM_NAME \
    -s $SERVICE_NAME 2> /dev/null)

# チーム名を入力して保存
if [ -z $ESA_TEAM ]; then
    echo "$PROG_NAME: ESA_TEAM is not found."
    input_team
fi

# オプションを解析
for OPT in "$@"; do
    case "$OPT" in
        '-h'|'--help') usage ;;
        '-n'|'--new')
            FLAG_NEW=1
            shift 1
            ;;
        '-N'|'--num')
            FLAG_NUM=1
            shift 1
            ;;
        '--token')
            FLAG_TOKEN=1
            shift 1
            ;;
        '--team')
            FLAG_TEAM=1
            shift 1
            ;;
        -*) usage ;;
        *)
            params+=("$1")
            shift 1
            ;;
    esac
done

# トークン変更フラグの場合にトーケンを変更から実行する
[ "${FLAG_TOKEN:-}" ] && input_token update

# チーム名変更フラグの場合にチーム名を変更してから実行する
[ "${FLAG_TEAM:-}" ] && input_team update

# 新規作成フラグの場合に記事作成画面を開いて終了
if [ "${FLAG_NEW:-}" ]; then
    open "https://$ESA_TEAM.esa.io/posts/new"
    exit 0
fi

# URLにESA_TEAMを設定する
POSTS_API=https://api.esa.io/v1/teams/$ESA_TEAM/posts?per_page=40

# 検索クエリがある場合にURLに設定
[ ! -z "${params:-}" ] && POSTS_API="$POSTS_API&q=${params[0]}"
# [ ! -z "${1:-}" ] && POSTS_API="$POSTS_API&q=$1"

# キャッシュ用ファイルを作成
ESA_TMP=$(mktemp -t esa) && trap "rm -f $ESA_TMP" 0 1 2

# esaの検索結果をキャッシュ
curl -H "Authorization: Bearer $ESA_TOKEN" \
-H "Accept: application/json;charset=UTF-8" \
-s $POSTS_API | jq ".posts[] | {
    number: .number,
    full_name: .full_name,
    url: .url
}" > $ESA_TMP

# 開くesaを選択する
FULL_NAME=$(jq -r ".full_name" $ESA_TMP | fzf)
[ -z "$FULL_NAME" ] && exit 1

if [ "${FLAG_NUM:-}" ]; then
    echo $(jq -r "select(.full_name == \"$FULL_NAME\") | .number" $ESA_TMP)
    exit 0
fi

# 選択されたesaのurlを取得し開く
open $(jq -r "select(.full_name == \"$FULL_NAME\") | .url" $ESA_TMP)
